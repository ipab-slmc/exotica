<?xml version="1.0" encoding="utf-8"?>
<library path="lib/libexotica_core_task_maps">
  <class name="exotica/ContinuousJointPose" type="exotica::ContinuousJointPose" base_class_type="exotica::TaskMap">
    <description>Representation of the SO(2) group using cos/sin</description>
  </class>
  <class name="exotica/ControlRegularization" type="exotica::ControlRegularization" base_class_type="exotica::TaskMap">
    <description>Linear map to controls</description>
  </class>
  <class name="exotica/CenterOfMass" type="exotica::CenterOfMass" base_class_type="exotica::TaskMap">
    <description>Centre of mass</description>
  </class>
  <class name="exotica/Distance" type="exotica::Distance" base_class_type="exotica::TaskMap">
    <description>Distance</description>
  </class>
  <class name="exotica/DistanceToLine2D" type="exotica::DistanceToLine2D" base_class_type="exotica::TaskMap">
    <description>Signed distance between line defined by two frames and a query point (third frame)</description>
  </class>
  <class name="exotica/PointToLine" type="exotica::PointToLine" base_class_type="exotica::TaskMap">
    <description>Point to line distance</description>
  </class>
  <class name="exotica/PointToPlane" type="exotica::PointToPlane" base_class_type="exotica::TaskMap">
    <description>Point to plane distance</description>
  </class>
  <class name="exotica/EffPosition" type="exotica::EffPosition" base_class_type="exotica::TaskMap">
    <description>End-effector position (3D)</description>
  </class>
  <class name="exotica/EffPositionXY" type="exotica::EffPositionXY" base_class_type="exotica::TaskMap">
    <description>End-effector position (2D)</description>
  </class>
  <class name="exotica/EffOrientation" type="exotica::EffOrientation" base_class_type="exotica::TaskMap">
    <description>End-effector position (SO3)</description>
  </class>
  <class name="exotica/EffFrame" type="exotica::EffFrame" base_class_type="exotica::TaskMap">
    <description>End-effector frame (SE3)</description>
  </class>
  <class name="exotica/EffAxisAlignment" type="exotica::EffAxisAlignment" base_class_type="exotica::TaskMap">
    <description>End-effector axis alignment</description>
  </class>
  <class name="exotica/EffVelocity" type="exotica::EffVelocity" base_class_type="exotica::TaskMap">
    <description>End-effector velocity (requires time-indexed problems)</description>
  </class>
  <class name="exotica/SphereCollision" type="exotica::SphereCollision" base_class_type="exotica::TaskMap">
    <description>Sphere collision avoidance</description>
  </class>
  <class name="exotica/JointPose" type="exotica::JointPose" base_class_type="exotica::TaskMap">
    <description>Joint position reference</description>
  </class>
  <class name="exotica/JointTorqueMinimizationProxy" type="exotica::JointTorqueMinimizationProxy" base_class_type="exotica::TaskMap">
    <description>Proxy metric for minimizing joint torque my mapping Cartesian space forces (selectable directions)</description>
  </class>
  <class name="exotica/InteractionMesh" type="exotica::InteractionMesh" base_class_type="exotica::TaskMap">
    <description>Interaction Mesh</description>
  </class>
  <class name="exotica/JointLimit" type="exotica::JointLimit" base_class_type="exotica::TaskMap">
    <description>Joint limits</description>
  </class>
  <class name="exotica/JointVelocityLimit" type="exotica::JointVelocityLimit" base_class_type="exotica::TaskMap">
    <description>Joint velocity limits (only works on time-indexed problems; penalises within percentage bound of velocity limit). Velocity limits can be set on a per joint basis.</description>
  </class>
  <class name="exotica/CollisionCheck" type="exotica::CollisionCheck" base_class_type="exotica::TaskMap">
    <description>Collision checking</description>
  </class>
  <class name="exotica/QuasiStatic" type="exotica::QuasiStatic" base_class_type="exotica::TaskMap">
    <description>Plannar quasi static cost/constraint</description>
  </class>
  <class name="exotica/SmoothCollisionDistance" type="exotica::SmoothCollisionDistance" base_class_type="exotica::TaskMap">
    <description>Smooth collision distance</description>
  </class>
  <class name="exotica/CollisionDistance" type="exotica::CollisionDistance" base_class_type="exotica::TaskMap">
    <description>Collision distance</description>
  </class>
  <class name="exotica/VariableSizeCollisionDistance" type="exotica::VariableSizeCollisionDistance" base_class_type="exotica::TaskMap">
    <description>Fixed-size collision distance task map. Size of dimension to be set a priori. If more CollisionProxies are returned, they will be dropped.</description>
  </class>
  <class name="exotica/SumOfPenetrations" type="exotica::SumOfPenetrations" base_class_type="exotica::TaskMap">
    <description>Sum of collision penetrations</description>
  </class>
  <class name="exotica/JointVelocityBackwardDifference" type="exotica::JointVelocityBackwardDifference" base_class_type="exotica::TaskMap">
    <description>Smooths joint velocities by penalizing an approximated first order time derivative of joint state using backward differencing. Task map for use with single-step/EndPose problems only.</description>
  </class>
  <class name="exotica/JointAccelerationBackwardDifference" type="exotica::JointAccelerationBackwardDifference" base_class_type="exotica::TaskMap">
    <description>Smooths joint accelerations by penalizing an approximated second order time derivative of joint state using backward differencing. Task map for use with single-step/EndPose problems only.</description>
  </class>
  <class name="exotica/JointJerkBackwardDifference" type="exotica::JointJerkBackwardDifference" base_class_type="exotica::TaskMap">
    <description>Smooths joint jerks by penalizing an approximated third order time derivative of joint state using backward differencing. Task map for use with single-step/EndPose problems only.</description>
  </class>
  <class name="exotica/LookAt" type="exotica::LookAt" base_class_type="exotica::TaskMap">
    <description>Looks at a target point by penalizing the vector which defines the orthogonal projection onto a defined line in the end-effector frame.</description>
  </class>
  <class name="exotica/Manipulability" type="exotica::Manipulability" base_class_type="exotica::TaskMap">
    <description>If used as a cost term, Manipulability maximizes the manipulability measure using Yoshikawa's measure based on the velocity ellipsoid. Note, in-order to maximize manipulability the associated Rho must be negative and the Goal must not be set to anything other than zeros (as by default). When Manipulability is used as an inequality constraint the lower bound must be set using Goal and each term must be negative. Derivatives are computed using finite differencing.</description>
  </class>
  <class name="exotica/GazeAtConstraint" type="exotica::GazeAtConstraint" base_class_type="exotica::TaskMap">
    <description>Keeps a gaze position within a cone in the end-effector frame defined by a given viewing angle. This task map can only be used as an inequality constraint.</description>
  </class>
  <class name="exotica/AvoidLookAtSphere" type="exotica::AvoidLookAtSphere" base_class_type="exotica::TaskMap">
    <description>
      Avoids "looking at" spherical objects. Can be used as either a cost term, or inequality constraint. The task map assumes the positions and radii of each object. 
    </description>
  </class>  
  <class name="exotica/EffBox" type="exotica::EffBox" base_class_type="exotica::TaskMap">
    <description>Limits the end-effector motion to a box in some reference frame. This task map can only be used as an inequality constraint.</description>
  </class>
  <class name="exotica/JointVelocityLimitConstraint" type="exotica::JointVelocityLimitConstraint" base_class_type="exotica::TaskMap">
    <description>Joint velocity limit task map for non time-indexed problems. This can only be used as an inequality constraint for end pose problems that are non time indexed.</description>
  </class>
</library>
